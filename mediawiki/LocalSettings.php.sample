<?php

/*
error_reporting( -1 );
ini_set( 'display_errors', 1 );

$wgShowExceptionDetails = true;
$wgDebugToolbar = true;
$wgShowDebug = true;
$wgDevelopmentWarnings = true;
*/

# This file was automatically generated by the MediaWiki 1.35.2
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}


## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Vassal";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/w";

$wgArticlePath = "/wiki/$1";
$wgUsePathInfo = true;

## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://vassalengine.org";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [ '1x' => "/images/wordmark-path.png" ];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "webmaster@vassalengine.org";
$wgPasswordSender = "webmaster@vassalengine.org";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "wikidb";
$wgDBuser = "wikiuser";
$wgDBpassword = "password";

$wgDBadminuser = 'wikiadmin';
$wgDBadminpassword = 'password';

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale. This should ideally be set to an English
## language locale so that the behaviour of C library functions will
## be consistent with typical installations. Use $wgLanguageCode to
## localise the wiki.
$wgShellLocale = "en_US.utf8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "password";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "password";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://creativecommons.org/licenses/by-sa/4.0/";
$wgRightsText = "Creative Commons Attribution-ShareAlike";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# prevent anonymous editing
$wgGroupPermissions['*']['edit'] = false;

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
#$wgDefaultSkin = "vector";
$wgDefaultSkin = "chameleon";

# Enabled skins.
# The following skins were automatically enabled:
#wfLoadSkin( 'MonoBook' );
#wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

wfLoadExtension( 'Bootstrap' );
wfLoadSkin( 'chameleon' );

#$egChameleonLayoutFile = __DIR__ . '/skins/chameleon/layouts/clean.xml';
#$egChameleonLayoutFile = __DIR__ . '/skins/chameleon/layouts/fixedhead.xml';
$egChameleonLayoutFile = __DIR__ . '/fixedhead.xml';
#$egChameleonThemeFile = '';

#$egChameleonExternalStyleVariables= [
#  'cmln-navbar-bg-color' => ''
#];

$egChameleonExternalStyleModules = [
  __DIR__ . '/local.scss' => 'afterMain'
];

# End of automatically generated settings.
# Add more configuration options below.

# additional file types 
$wgFileExtensions = array_merge($wgFileExtensions, [ 
  'vmod', 'vmdx', 'vsav', 'vlog', 'vdck', # VASSAL file types
  'zip', 'gz', 'bz2', 'xz',               # generic archive types
  'java',                                 # Java source code
  'pdf', 'txt',                           # documentation
  'svg'                                   # SVG images
]);

$wgHooks['MimeMagicInit'][] = function ( MimeAnalyzer $mime ) {
  # our MIME types
  $mime->addExtraTypes('application/vnd.vassalengine.game-log vlog');
  $mime->addExtraTypes('application/vnd.vassalengine.module vmod');
  $mime->addExtraTypes('application/vnd.vassalengine.module-extension vmdx');
  $mime->addExtraTypes('application/vnd.vassalengine.saved-game vsav');
  $mime->addExtraTypes('application/zip zip jar xpi sxc stc sxd std sxi sti sxm stm sxw stw vmod vmdx vlog vsav');
  $mime->addExtraTypes('text/plain txt vdck');

  # our MIME info
  $mime->addExtraInfo('application/vnd.vassalengine.game-log [ARCHIVE]');
  $mime->addExtraInfo('application/vnd.vassalengine.module [ARCHIVE]');
  $mime->addExtraInfo('application/vnd.vassalengine.module-extension [ARCHIVE]');
  $mime->addExtraInfo('application/vnd.vassalengine.saved-game [ARCHIVE]');
};

# modules contain .class files
$wgAllowJavaUploads = true;

$wgMaxUploadSize = 250*1024*1024;

wfLoadExtension( 'PluggableAuth' );
wfLoadExtension( 'DiscourseSsoConsumer' );

#$wgPluggableAuth_EnableAutoLogin = true;
$wgPluggableAuth_EnableAutoLogin = false;
$wgPluggableAuth_EnableLocalLogin = false;
$wgPluggableAuth_EnableLocalProperties = false;

$wgDiscourseSsoConsumer_SsoProviderUrl = 'https://forum.vassalengine.org/session/sso_provider';
$wgDiscourseSsoConsumer_SharedSecret = 'password';
$wgDiscourseSsoConsumer_LinkExistingBy = [ 'username' ];
$wgDiscourseSsoConsumer_ExposeName = false;
$wgDiscourseSsoConsumer_ExposeEmail = false;
# $wgDiscourseSsoConsumer_GroupMaps
$wgDiscourseSsoConsumer_LogoutDiscourse = true;

# Allow auth extensions to generate new local users.
$wgGroupPermissions['*']['autocreateaccount'] = true;

wfLoadExtension( 'ParserFunctions' );

require_once "$IP/extensions/MediaFunctions/MediaFunctions.php";
# wfLoadExtension( 'MediaFunctions' );

require_once "$IP/extensions/UserFunctions/UserFunctions.php";
# wfLoadExtension( 'UserFunctions' );

define( 'NS_MODULE', 100 );
define( 'NS_MODULE_TALK', 101 );

$wgExtraNamespaces[NS_MODULE] = 'Module';
$wgExtraNamespaces[NS_MODULE_TALK] = 'Module_talk';

$wgContentNamespaces[] = NS_MODULE;
$wgNamespacesToBeSearchedDefault[NS_MODULE] = true;
$wgNamespacesToBeSearchedDefault[NS_MODULE_TALK] = false;

# permit UserFunctions in all namespaces
$wgUFAllowedNamespaces = array_fill(0, 16, true);
$wgUFAllowedNamespaces[NS_MODULE] = true;
$wgUFAllowedNamespaces[NS_MODULE_TALK] = true;

wfLoadExtension( 'Moderation' );

$wgModerationEnable = true;

$wgGroupPermissions['user']['move'] = false;
#$wgGroupPermissions['user']['edit'] = false;
$wgGroupPermissions['user']['edit'] = true;
$wgGroupPermissions['sysop']['moderation'] = true;
$wgGroupPermissions['sysop']['skip-moderation'] = true;

$wgAddGroups['sysop'][] = 'automoderated';
$wgRemoveGroups['sysop'][] = 'automoderated';

#$wgAutopromote['automoderated'] = array(
#  APCOND_EDITCOUNT, 5
#);

wfLoadExtension( 'AWS' );

$wgAWSCredentials = [
  'key' => 'password',
  'secret' => 'password',
  'token' => false
];

$wgAWSRegion = 'us-east-1';
$wgAWSBucketName = 'vassal';
$wgAWSBucketDomain = '$1.us-east-1.linodeobjects.com';
$wgFileBackends['s3']['endpoint'] = 'https://us-east-1.linodeobjects.com';

$wgAWSBucketTopSubdirectory = '/images';
$wgAWSRepoHashLevels = '2';
$wgAWSRepoDeletedHashLevels = '3';
